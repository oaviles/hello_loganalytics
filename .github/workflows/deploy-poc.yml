# This is a basic workflow to help you get started with Actions

name: Deploy PoC Env

# Controls when the workflow will run
on: workflow_dispatch

env:
  APP_ID: ${{ secrets.CLIENTID }}
  SP_PWD: ${{ secrets.CLIENTSECRET }}
  TENANT_ID: ${{ secrets.TENANTID }}
  DOTNET_VERSION: '6.0.x'
  OALALOGS_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  OALALOGS_ARTIFACT: oalaogs-func

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy-poc-env:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          
      - run: |
          cd IaC
          chmod 775 deploy-poc-env.sh
          ./deploy-poc-env.sh $APP_ID $SP_PWD $TENANT_ID
        shell: bash
  build-package:
    runs-on: windows-latest

    steps:
      # Checkout the repo
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      
      # Setup .NET Runtme
      - name: Setup .NET Runtime
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      
      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/myapp' 
          
      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.OALALOGS_ARTIFACT }}
          path: ${{ env.OALALOGS_PACKAGE_PATH }}/myapp
